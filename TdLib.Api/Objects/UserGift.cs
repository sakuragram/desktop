using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a gift received by a user
        /// </summary>
        public partial class UserGift : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "userGift";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the user that sent the gift; 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_user_id")]
            public long SenderUserId { get; set; }

            /// <summary>
            /// Message added to the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public FormattedText Text { get; set; }

            /// <summary>
            /// True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone are able to see them
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_private")]
            public bool IsPrivate { get; set; }

            /// <summary>
            /// True, if the gift is displayed on the user's profile page; may be false only for the receiver of the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_saved")]
            public bool IsSaved { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the gift was sent
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("date")]
            public int Date { get; set; }

            /// <summary>
            /// The gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("gift")]
            public Gift Gift { get; set; }

            /// <summary>
            /// Identifier of the message with the gift in the chat with the sender of the gift; can be 0 or an identifier of a deleted message; only for the gift receiver
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Number of Telegram Stars that can be claimed by the receiver instead of the gift; 0 if the gift can't be sold by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sell_star_count")]
            public long SellStarCount { get; set; }
        }
    }
}
// REUSE-IgnoreEnd